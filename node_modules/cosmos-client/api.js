// tslint:disable
/**
 * Gaia-Lite for Cosmos
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as globalImportUrl from "url";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, } from "./base";
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAccountsAddressGet(address, options = {}) {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError("address", "Required parameter address was null or undefined when calling authAccountsAddressGet.");
            }
            const localVarPath = `/auth/accounts/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(address)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAccountsAddressGet(address, options) {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authAccountsAddressGet(address, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAccountsAddressGet(address, options) {
            return AuthApiFp(configuration).authAccountsAddressGet(address, options)(axios, basePath);
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @summary Get the account information on blockchain
     * @param {string} address Account address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authAccountsAddressGet(address, options) {
        return AuthApiFp(this.configuration).authAccountsAddressGet(address, options)(this.axios, this.basePath);
    }
}
/**
 * BankApi - axios parameter creator
 * @export
 */
export const BankApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {SendReq} account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost(address, account, options = {}) {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError("address", "Required parameter address was null or undefined when calling bankAccountsAddressTransfersPost.");
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError("account", "Required parameter account was null or undefined when calling bankAccountsAddressTransfersPost.");
            }
            const localVarPath = `/bank/accounts/{address}/transfers`.replace(`{${"address"}}`, encodeURIComponent(String(address)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof account !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(account !== undefined ? account : {})
                : account || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankBalancesAddressGet(address, options = {}) {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError("address", "Required parameter address was null or undefined when calling bankBalancesAddressGet.");
            }
            const localVarPath = `/bank/balances/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(address)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BankApi - functional programming interface
 * @export
 */
export const BankApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {SendReq} account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost(address, account, options) {
            const localVarAxiosArgs = BankApiAxiosParamCreator(configuration).bankAccountsAddressTransfersPost(address, account, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankBalancesAddressGet(address, options) {
            const localVarAxiosArgs = BankApiAxiosParamCreator(configuration).bankBalancesAddressGet(address, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * BankApi - factory interface
 * @export
 */
export const BankApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {SendReq} account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost(address, account, options) {
            return BankApiFp(configuration).bankAccountsAddressTransfersPost(address, account, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankBalancesAddressGet(address, options) {
            return BankApiFp(configuration).bankBalancesAddressGet(address, options)(axios, basePath);
        },
    };
};
/**
 * BankApi - object-oriented interface
 * @export
 * @class BankApi
 * @extends {BaseAPI}
 */
export class BankApi extends BaseAPI {
    /**
     *
     * @summary Send coins from one account to another
     * @param {string} address Account address in bech32 format
     * @param {SendReq} account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankApi
     */
    bankAccountsAddressTransfersPost(address, account, options) {
        return BankApiFp(this.configuration).bankAccountsAddressTransfersPost(address, account, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get the account balances
     * @param {string} address Account address in bech32 format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankApi
     */
    bankBalancesAddressGet(address, options) {
        return BankApiFp(this.configuration).bankBalancesAddressGet(address, options)(this.axios, this.basePath);
    }
}
/**
 * DistributionApi - axios parameter creator
 * @export
 */
export const DistributionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet(options = {}) {
            const localVarPath = `/distribution/community_pool`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsGet.");
            }
            const localVarPath = `/distribution/delegators/{delegatorAddr}/rewards`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsPost.");
            }
            const localVarPath = `/distribution/delegators/{delegatorAddr}/rewards`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.");
            }
            const localVarPath = `/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}`
                .replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)))
                .replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.");
            }
            const localVarPath = `/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}`
                .replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)))
                .replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressGet.");
            }
            const localVarPath = `/distribution/delegators/{delegatorAddr}/withdraw_address`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {SetWithdrawAddressReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressPost.");
            }
            const localVarPath = `/distribution/delegators/{delegatorAddr}/withdraw_address`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParametersGet(options = {}) {
            const localVarPath = `/distribution/parameters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet(validatorAddr, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrGet.");
            }
            const localVarPath = `/distribution/validators/{validatorAddr}`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrOutstandingRewardsGet.");
            }
            const localVarPath = `/distribution/validators/{validatorAddr}/outstanding_rewards`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsGet.");
            }
            const localVarPath = `/distribution/validators/{validatorAddr}/rewards`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsPost.");
            }
            const localVarPath = `/distribution/validators/{validatorAddr}/rewards`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DistributionApi - functional programming interface
 * @export
 */
export const DistributionApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet(options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionCommunityPoolGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {SetWithdrawAddressReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParametersGet(options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionParametersGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet(validatorAddr, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options) {
            const localVarAxiosArgs = DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DistributionApi - factory interface
 * @export
 */
export const DistributionApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet(options) {
            return DistributionApiFp(configuration).distributionCommunityPoolGet(options)(axios, basePath);
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options) {
            return DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options) {
            return DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            return DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            return DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options) {
            return DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {SetWithdrawAddressReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options) {
            return DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParametersGet(options) {
            return DistributionApiFp(configuration).distributionParametersGet(options)(axios, basePath);
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet(validatorAddr, options) {
            return DistributionApiFp(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options) {
            return DistributionApiFp(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(axios, basePath);
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options) {
            return DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(axios, basePath);
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options) {
            return DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
    };
};
/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
export class DistributionApi extends BaseAPI {
    /**
     *
     * @summary Community pool parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionCommunityPoolGet(options) {
        return DistributionApiFp(this.configuration).distributionCommunityPoolGet(options)(this.axios, this.basePath);
    }
    /**
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @summary Get the total rewards balance from all delegations
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options) {
        return DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(this.axios, this.basePath);
    }
    /**
     * Withdraw all the delegator\'s delegation rewards
     * @summary Withdraw all the delegator\'s delegation rewards
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options) {
        return DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    }
    /**
     * Query a single delegation reward by a delegator
     * @summary Query a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
        return DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     * Withdraw a delegator\'s delegation reward from a single validator
     * @summary Withdraw a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options) {
        return DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    }
    /**
     * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @summary Get the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options) {
        return DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(this.axios, this.basePath);
    }
    /**
     * Replace the delegations\' rewards withdrawal address for a new one.
     * @summary Replace the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {SetWithdrawAddressReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options) {
        return DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Fee distribution parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionParametersGet(options) {
        return DistributionApiFp(this.configuration).distributionParametersGet(options)(this.axios, this.basePath);
    }
    /**
     * Query the distribution information of a single validator
     * @summary Validator distribution information
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrGet(validatorAddr, options) {
        return DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Fee distribution outstanding rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options) {
        return DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     * Query the commission and self-delegation rewards of validator.
     * @summary Commission and self-delegation rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options) {
        return DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     * Withdraw the validator\'s self-delegation and commissions rewards
     * @summary Withdraw the validator\'s rewards
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options) {
        return DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    }
}
/**
 * GaiaRESTApi - axios parameter creator
 * @export
 */
export const GaiaRESTApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet(options = {}) {
            const localVarPath = `/node_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * GaiaRESTApi - functional programming interface
 * @export
 */
export const GaiaRESTApiFp = function (configuration) {
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet(options) {
            const localVarAxiosArgs = GaiaRESTApiAxiosParamCreator(configuration).nodeInfoGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * GaiaRESTApi - factory interface
 * @export
 */
export const GaiaRESTApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet(options) {
            return GaiaRESTApiFp(configuration).nodeInfoGet(options)(axios, basePath);
        },
    };
};
/**
 * GaiaRESTApi - object-oriented interface
 * @export
 * @class GaiaRESTApi
 * @extends {BaseAPI}
 */
export class GaiaRESTApi extends BaseAPI {
    /**
     * Information about the connected node
     * @summary The properties of the connected node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaiaRESTApi
     */
    nodeInfoGet(options) {
        return GaiaRESTApiFp(this.configuration).nodeInfoGet(options)(this.axios, this.basePath);
    }
}
/**
 * GovernanceApi - axios parameter creator
 * @export
 */
export const GovernanceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersDepositGet(options = {}) {
            const localVarPath = `/gov/parameters/deposit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersTallyingGet(options = {}) {
            const localVarPath = `/gov/parameters/tallying`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersVotingGet(options = {}) {
            const localVarPath = `/gov/parameters/voting`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsGet(voter, depositor, status, options = {}) {
            const localVarPath = `/gov/proposals`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (voter !== undefined) {
                localVarQueryParameter["voter"] = voter;
            }
            if (depositor !== undefined) {
                localVarQueryParameter["depositor"] = depositor;
            }
            if (status !== undefined) {
                localVarQueryParameter["status"] = status;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {ParamChangeProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsParamChangePost(postProposalBody, options = {}) {
            // verify required parameter 'postProposalBody' is not null or undefined
            if (postProposalBody === null || postProposalBody === undefined) {
                throw new RequiredError("postProposalBody", "Required parameter postProposalBody was null or undefined when calling govProposalsParamChangePost.");
            }
            const localVarPath = `/gov/proposals/param_change`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof postProposalBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {})
                : postProposalBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsPost(postProposalBody, options = {}) {
            // verify required parameter 'postProposalBody' is not null or undefined
            if (postProposalBody === null || postProposalBody === undefined) {
                throw new RequiredError("postProposalBody", "Required parameter postProposalBody was null or undefined when calling govProposalsPost.");
            }
            const localVarPath = `/gov/proposals`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof postProposalBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {})
                : postProposalBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.");
            }
            // verify required parameter 'depositor' is not null or undefined
            if (depositor === null || depositor === undefined) {
                throw new RequiredError("depositor", "Required parameter depositor was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/deposits/{depositor}`
                .replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"depositor"}}`, encodeURIComponent(String(depositor)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet(proposalId, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsGet.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/deposits`.replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {DepositReq} postDepositBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsPost.");
            }
            // verify required parameter 'postDepositBody' is not null or undefined
            if (postDepositBody === null || postDepositBody === undefined) {
                throw new RequiredError("postDepositBody", "Required parameter postDepositBody was null or undefined when calling govProposalsProposalIdDepositsPost.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/deposits`.replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof postDepositBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postDepositBody !== undefined ? postDepositBody : {})
                : postDepositBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet(proposalId, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdGet.");
            }
            const localVarPath = `/gov/proposals/{proposalId}`.replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet(proposalId, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdProposerGet.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/proposer`.replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet(proposalId, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdTallyGet.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/tally`.replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet(proposalId, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesGet.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/votes`.replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {VoteReq} postVoteBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost(proposalId, postVoteBody, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesPost.");
            }
            // verify required parameter 'postVoteBody' is not null or undefined
            if (postVoteBody === null || postVoteBody === undefined) {
                throw new RequiredError("postVoteBody", "Required parameter postVoteBody was null or undefined when calling govProposalsProposalIdVotesPost.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/votes`.replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof postVoteBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postVoteBody !== undefined ? postVoteBody : {})
                : postVoteBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet(proposalId, voter, options = {}) {
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesVoterGet.");
            }
            // verify required parameter 'voter' is not null or undefined
            if (voter === null || voter === undefined) {
                throw new RequiredError("voter", "Required parameter voter was null or undefined when calling govProposalsProposalIdVotesVoterGet.");
            }
            const localVarPath = `/gov/proposals/{proposalId}/votes/{voter}`
                .replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"voter"}}`, encodeURIComponent(String(voter)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * GovernanceApi - functional programming interface
 * @export
 */
export const GovernanceApiFp = function (configuration) {
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersDepositGet(options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govParametersDepositGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersTallyingGet(options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govParametersTallyingGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersVotingGet(options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govParametersVotingGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsGet(voter, depositor, status, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsGet(voter, depositor, status, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsParamChangePost(postProposalBody, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsParamChangePost(postProposalBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsPost(postProposalBody, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsPost(postProposalBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet(proposalId, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsGet(proposalId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {DepositReq} postDepositBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet(proposalId, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdGet(proposalId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet(proposalId, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdProposerGet(proposalId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet(proposalId, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdTallyGet(proposalId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet(proposalId, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesGet(proposalId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {VoteReq} postVoteBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost(proposalId, postVoteBody, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet(proposalId, voter, options) {
            const localVarAxiosArgs = GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * GovernanceApi - factory interface
 * @export
 */
export const GovernanceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersDepositGet(options) {
            return GovernanceApiFp(configuration).govParametersDepositGet(options)(axios, basePath);
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersTallyingGet(options) {
            return GovernanceApiFp(configuration).govParametersTallyingGet(options)(axios, basePath);
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersVotingGet(options) {
            return GovernanceApiFp(configuration).govParametersVotingGet(options)(axios, basePath);
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsGet(voter, depositor, status, options) {
            return GovernanceApiFp(configuration).govProposalsGet(voter, depositor, status, options)(axios, basePath);
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsParamChangePost(postProposalBody, options) {
            return GovernanceApiFp(configuration).govProposalsParamChangePost(postProposalBody, options)(axios, basePath);
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsPost(postProposalBody, options) {
            return GovernanceApiFp(configuration).govProposalsPost(postProposalBody, options)(axios, basePath);
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(axios, basePath);
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet(proposalId, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdDepositsGet(proposalId, options)(axios, basePath);
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {DepositReq} postDepositBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(axios, basePath);
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet(proposalId, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdGet(proposalId, options)(axios, basePath);
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet(proposalId, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdProposerGet(proposalId, options)(axios, basePath);
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet(proposalId, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdTallyGet(proposalId, options)(axios, basePath);
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet(proposalId, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdVotesGet(proposalId, options)(axios, basePath);
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {VoteReq} postVoteBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost(proposalId, postVoteBody, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(axios, basePath);
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet(proposalId, voter, options) {
            return GovernanceApiFp(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(axios, basePath);
        },
    };
};
/**
 * GovernanceApi - object-oriented interface
 * @export
 * @class GovernanceApi
 * @extends {BaseAPI}
 */
export class GovernanceApi extends BaseAPI {
    /**
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @summary Query governance deposit parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govParametersDepositGet(options) {
        return GovernanceApiFp(this.configuration).govParametersDepositGet(options)(this.axios, this.basePath);
    }
    /**
     * Query governance tally parameters
     * @summary Query governance tally parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govParametersTallyingGet(options) {
        return GovernanceApiFp(this.configuration).govParametersTallyingGet(options)(this.axios, this.basePath);
    }
    /**
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @summary Query governance voting parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govParametersVotingGet(options) {
        return GovernanceApiFp(this.configuration).govParametersVotingGet(options)(this.axios, this.basePath);
    }
    /**
     * Query proposals information with parameters
     * @summary Query proposals
     * @param {string} [voter] voter address
     * @param {string} [depositor] depositor address
     * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsGet(voter, depositor, status, options) {
        return GovernanceApiFp(this.configuration).govProposalsGet(voter, depositor, status, options)(this.axios, this.basePath);
    }
    /**
     * Generate a parameter change proposal transaction
     * @summary Generate a parameter change proposal transaction
     * @param {ParamChangeProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsParamChangePost(postProposalBody, options) {
        return GovernanceApiFp(this.configuration).govProposalsParamChangePost(postProposalBody, options)(this.axios, this.basePath);
    }
    /**
     * Send transaction to submit a proposal
     * @summary Submit a proposal
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsPost(postProposalBody, options) {
        return GovernanceApiFp(this.configuration).govProposalsPost(postProposalBody, options)(this.axios, this.basePath);
    }
    /**
     * Query deposit by proposalId and depositor address
     * @summary Query deposit
     * @param {string} proposalId proposal id
     * @param {string} depositor Bech32 depositor address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(this.axios, this.basePath);
    }
    /**
     * Query deposits by proposalId
     * @summary Query deposits
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdDepositsGet(proposalId, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsGet(proposalId, options)(this.axios, this.basePath);
    }
    /**
     * Send transaction to deposit tokens to a proposal
     * @summary Deposit tokens to a proposal
     * @param {string} proposalId proposal id
     * @param {DepositReq} postDepositBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(this.axios, this.basePath);
    }
    /**
     * Query a proposal by id
     * @summary Query a proposal
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdGet(proposalId, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdGet(proposalId, options)(this.axios, this.basePath);
    }
    /**
     * Query for the proposer for a proposal
     * @summary Query proposer
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdProposerGet(proposalId, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdProposerGet(proposalId, options)(this.axios, this.basePath);
    }
    /**
     * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
     * @summary Get a proposal\'s tally result at the current time
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdTallyGet(proposalId, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdTallyGet(proposalId, options)(this.axios, this.basePath);
    }
    /**
     * Query voters information by proposalId
     * @summary Query voters
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdVotesGet(proposalId, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdVotesGet(proposalId, options)(this.axios, this.basePath);
    }
    /**
     * Send transaction to vote a proposal
     * @summary Vote a proposal
     * @param {string} proposalId proposal id
     * @param {VoteReq} postVoteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdVotesPost(proposalId, postVoteBody, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(this.axios, this.basePath);
    }
    /**
     * Query vote information by proposal Id and voter address
     * @summary Query vote
     * @param {string} proposalId proposal id
     * @param {string} voter Bech32 voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdVotesVoterGet(proposalId, voter, options) {
        return GovernanceApiFp(this.configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(this.axios, this.basePath);
    }
}
/**
 * IBCApi - axios parameter creator
 * @export
 */
export const IBCApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Channel open-init
         * @param {ChannelOpenInitReq} channelOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenInitPost(channelOpenInitRequestBody, options = {}) {
            // verify required parameter 'channelOpenInitRequestBody' is not null or undefined
            if (channelOpenInitRequestBody === null ||
                channelOpenInitRequestBody === undefined) {
                throw new RequiredError("channelOpenInitRequestBody", "Required parameter channelOpenInitRequestBody was null or undefined when calling ibcChannelsOpenInitPost.");
            }
            const localVarPath = `/ibc/channels/open-init`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof channelOpenInitRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenInitRequestBody !== undefined
                    ? channelOpenInitRequestBody
                    : {})
                : channelOpenInitRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel open-try
         * @param {ChannelOpenTryReq} channelOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenTryPost(channelOpenTryRequestBody, options = {}) {
            // verify required parameter 'channelOpenTryRequestBody' is not null or undefined
            if (channelOpenTryRequestBody === null ||
                channelOpenTryRequestBody === undefined) {
                throw new RequiredError("channelOpenTryRequestBody", "Required parameter channelOpenTryRequestBody was null or undefined when calling ibcChannelsOpenTryPost.");
            }
            const localVarPath = `/ibc/channels/open-try`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof channelOpenTryRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenTryRequestBody !== undefined
                    ? channelOpenTryRequestBody
                    : {})
                : channelOpenTryRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query client state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdClientStateGet(clientId, prove, options = {}) {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdClientStateGet.");
            }
            const localVarPath = `/ibc/clients/{client-id}/client-state`.replace(`{${"client-id"}}`, encodeURIComponent(String(clientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query connections of a client
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConnectionsGet(clientId, prove, options = {}) {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdConnectionsGet.");
            }
            const localVarPath = `/ibc/clients/{client-id}/connections`.replace(`{${"client-id"}}`, encodeURIComponent(String(clientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query cliet consensus-state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConsensusStateGet(clientId, prove, options = {}) {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdConsensusStateGet.");
            }
            const localVarPath = `/ibc/clients/{client-id}/consensus-state`.replace(`{${"client-id"}}`, encodeURIComponent(String(clientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit misbehaviour
         * @param {string} clientId Client ID
         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options = {}) {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdMisbehaviourPost.");
            }
            // verify required parameter 'submitMisbehaviourRequestBody' is not null or undefined
            if (submitMisbehaviourRequestBody === null ||
                submitMisbehaviourRequestBody === undefined) {
                throw new RequiredError("submitMisbehaviourRequestBody", "Required parameter submitMisbehaviourRequestBody was null or undefined when calling ibcClientsClientIdMisbehaviourPost.");
            }
            const localVarPath = `/ibc/clients/{client-id}/misbehaviour`.replace(`{${"client-id"}}`, encodeURIComponent(String(clientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof submitMisbehaviourRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(submitMisbehaviourRequestBody !== undefined
                    ? submitMisbehaviourRequestBody
                    : {})
                : submitMisbehaviourRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query client root
         * @param {string} clientId Client ID
         * @param {number} height Root height
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdRootsHeightGet(clientId, height, prove, options = {}) {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdRootsHeightGet.");
            }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError("height", "Required parameter height was null or undefined when calling ibcClientsClientIdRootsHeightGet.");
            }
            const localVarPath = `/ibc/clients/{client-id}/roots/{height}`
                .replace(`{${"client-id"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update client
         * @param {string} clientId Client ID
         * @param {UpdateClientReq} updateClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options = {}) {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdUpdatePost.");
            }
            // verify required parameter 'updateClientRequestBody' is not null or undefined
            if (updateClientRequestBody === null ||
                updateClientRequestBody === undefined) {
                throw new RequiredError("updateClientRequestBody", "Required parameter updateClientRequestBody was null or undefined when calling ibcClientsClientIdUpdatePost.");
            }
            const localVarPath = `/ibc/clients/{client-id}/update`.replace(`{${"client-id"}}`, encodeURIComponent(String(clientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof updateClientRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(updateClientRequestBody !== undefined
                    ? updateClientRequestBody
                    : {})
                : updateClientRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create client
         * @param {CreateClientReq} createClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsPost(createClientRequestBody, options = {}) {
            // verify required parameter 'createClientRequestBody' is not null or undefined
            if (createClientRequestBody === null ||
                createClientRequestBody === undefined) {
                throw new RequiredError("createClientRequestBody", "Required parameter createClientRequestBody was null or undefined when calling ibcClientsPost.");
            }
            const localVarPath = `/ibc/clients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof createClientRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(createClientRequestBody !== undefined
                    ? createClientRequestBody
                    : {})
                : createClientRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query connection
         * @param {string} connectionId Connection ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdGet(connectionId, prove, options = {}) {
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new RequiredError("connectionId", "Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdGet.");
            }
            const localVarPath = `/ibc/connections/{connection-id}`.replace(`{${"connection-id"}}`, encodeURIComponent(String(connectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-ack
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options = {}) {
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new RequiredError("connectionId", "Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.");
            }
            // verify required parameter 'connectionOpenAckRequestBody' is not null or undefined
            if (connectionOpenAckRequestBody === null ||
                connectionOpenAckRequestBody === undefined) {
                throw new RequiredError("connectionOpenAckRequestBody", "Required parameter connectionOpenAckRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.");
            }
            const localVarPath = `/ibc/connections/{connection-id}/open-ack`.replace(`{${"connection-id"}}`, encodeURIComponent(String(connectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof connectionOpenAckRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenAckRequestBody !== undefined
                    ? connectionOpenAckRequestBody
                    : {})
                : connectionOpenAckRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-confirm
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options = {}) {
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new RequiredError("connectionId", "Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.");
            }
            // verify required parameter 'connectionOpenConfirmRequestBody' is not null or undefined
            if (connectionOpenConfirmRequestBody === null ||
                connectionOpenConfirmRequestBody === undefined) {
                throw new RequiredError("connectionOpenConfirmRequestBody", "Required parameter connectionOpenConfirmRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.");
            }
            const localVarPath = `/ibc/connections/{connection-id}/open-confirm`.replace(`{${"connection-id"}}`, encodeURIComponent(String(connectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof connectionOpenConfirmRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenConfirmRequestBody !== undefined
                    ? connectionOpenConfirmRequestBody
                    : {})
                : connectionOpenConfirmRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-init
         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options = {}) {
            // verify required parameter 'connectionOpenInitRequestBody' is not null or undefined
            if (connectionOpenInitRequestBody === null ||
                connectionOpenInitRequestBody === undefined) {
                throw new RequiredError("connectionOpenInitRequestBody", "Required parameter connectionOpenInitRequestBody was null or undefined when calling ibcConnectionsOpenInitPost.");
            }
            const localVarPath = `/ibc/connections/open-init`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof connectionOpenInitRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenInitRequestBody !== undefined
                    ? connectionOpenInitRequestBody
                    : {})
                : connectionOpenInitRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-try
         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options = {}) {
            // verify required parameter 'connectionOpenTryRequestBody' is not null or undefined
            if (connectionOpenTryRequestBody === null ||
                connectionOpenTryRequestBody === undefined) {
                throw new RequiredError("connectionOpenTryRequestBody", "Required parameter connectionOpenTryRequestBody was null or undefined when calling ibcConnectionsOpenTryPost.");
            }
            const localVarPath = `/ibc/connections/open-try`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof connectionOpenTryRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenTryRequestBody !== undefined
                    ? connectionOpenTryRequestBody
                    : {})
                : connectionOpenTryRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcHeaderGet(options = {}) {
            const localVarPath = `/ibc/header`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query node consensus-state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcNodeStateGet(options = {}) {
            const localVarPath = `/ibc/node-state`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Receive packet
         * @param {ReceivedPacketReq} receivePacketRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPacketsReceivePost(receivePacketRequestBody, options = {}) {
            // verify required parameter 'receivePacketRequestBody' is not null or undefined
            if (receivePacketRequestBody === null ||
                receivePacketRequestBody === undefined) {
                throw new RequiredError("receivePacketRequestBody", "Required parameter receivePacketRequestBody was null or undefined when calling ibcPacketsReceivePost.");
            }
            const localVarPath = `/ibc/packets/receive`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof receivePacketRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(receivePacketRequestBody !== undefined
                    ? receivePacketRequestBody
                    : {})
                : receivePacketRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query IBC path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPathGet(options = {}) {
            const localVarPath = `/ibc/path`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel close-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options = {}) {
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.");
            }
            // verify required parameter 'channelCloseConfirmRequestBody' is not null or undefined
            if (channelCloseConfirmRequestBody === null ||
                channelCloseConfirmRequestBody === undefined) {
                throw new RequiredError("channelCloseConfirmRequestBody", "Required parameter channelCloseConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.");
            }
            const localVarPath = `/ibc/ports/{port-id}/channels/{channel-id}/close-confirm`
                .replace(`{${"port-id"}}`, encodeURIComponent(String(portId)))
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof channelCloseConfirmRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelCloseConfirmRequestBody !== undefined
                    ? channelCloseConfirmRequestBody
                    : {})
                : channelCloseConfirmRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel close-init
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseInitReq} channelCloseInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options = {}) {
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.");
            }
            // verify required parameter 'channelCloseInitRequestBody' is not null or undefined
            if (channelCloseInitRequestBody === null ||
                channelCloseInitRequestBody === undefined) {
                throw new RequiredError("channelCloseInitRequestBody", "Required parameter channelCloseInitRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.");
            }
            const localVarPath = `/ibc/ports/{port-id}/channels/{channel-id}/close-init`
                .replace(`{${"port-id"}}`, encodeURIComponent(String(portId)))
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof channelCloseInitRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelCloseInitRequestBody !== undefined
                    ? channelCloseInitRequestBody
                    : {})
                : channelCloseInitRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query channel
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options = {}) {
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.");
            }
            const localVarPath = `/ibc/ports/{port-id}/channels/{channel-id}`
                .replace(`{${"port-id"}}`, encodeURIComponent(String(portId)))
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query next sequence receive
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options = {}) {
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.");
            }
            const localVarPath = `/ibc/ports/{port-id}/channels/{channel-id}/next-sequence-recv`
                .replace(`{${"port-id"}}`, encodeURIComponent(String(portId)))
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel open-ack
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenAckReq} channelOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options = {}) {
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.");
            }
            // verify required parameter 'channelOpenAckRequestBody' is not null or undefined
            if (channelOpenAckRequestBody === null ||
                channelOpenAckRequestBody === undefined) {
                throw new RequiredError("channelOpenAckRequestBody", "Required parameter channelOpenAckRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.");
            }
            const localVarPath = `/ibc/ports/{port-id}/channels/{channel-id}/open-ack`
                .replace(`{${"port-id"}}`, encodeURIComponent(String(portId)))
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof channelOpenAckRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenAckRequestBody !== undefined
                    ? channelOpenAckRequestBody
                    : {})
                : channelOpenAckRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel open-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options = {}) {
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.");
            }
            // verify required parameter 'channelOpenConfirmRequestBody' is not null or undefined
            if (channelOpenConfirmRequestBody === null ||
                channelOpenConfirmRequestBody === undefined) {
                throw new RequiredError("channelOpenConfirmRequestBody", "Required parameter channelOpenConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.");
            }
            const localVarPath = `/ibc/ports/{port-id}/channels/{channel-id}/open-confirm`
                .replace(`{${"port-id"}}`, encodeURIComponent(String(portId)))
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof channelOpenConfirmRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenConfirmRequestBody !== undefined
                    ? channelOpenConfirmRequestBody
                    : {})
                : channelOpenConfirmRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transfer token
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {TransferTokenReq} transferTokenRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options = {}) {
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.");
            }
            // verify required parameter 'transferTokenRequestBody' is not null or undefined
            if (transferTokenRequestBody === null ||
                transferTokenRequestBody === undefined) {
                throw new RequiredError("transferTokenRequestBody", "Required parameter transferTokenRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.");
            }
            const localVarPath = `/ibc/ports/{port-id}/channels/{channel-id}/transfer`
                .replace(`{${"port-id"}}`, encodeURIComponent(String(portId)))
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof transferTokenRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(transferTokenRequestBody !== undefined
                    ? transferTokenRequestBody
                    : {})
                : transferTokenRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IBCApi - functional programming interface
 * @export
 */
export const IBCApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Channel open-init
         * @param {ChannelOpenInitReq} channelOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenInitPost(channelOpenInitRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel open-try
         * @param {ChannelOpenTryReq} channelOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenTryPost(channelOpenTryRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query client state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdClientStateGet(clientId, prove, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query connections of a client
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConnectionsGet(clientId, prove, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query cliet consensus-state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConsensusStateGet(clientId, prove, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit misbehaviour
         * @param {string} clientId Client ID
         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query client root
         * @param {string} clientId Client ID
         * @param {number} height Root height
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdRootsHeightGet(clientId, height, prove, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update client
         * @param {string} clientId Client ID
         * @param {UpdateClientReq} updateClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create client
         * @param {CreateClientReq} createClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsPost(createClientRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcClientsPost(createClientRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query connection
         * @param {string} connectionId Connection ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdGet(connectionId, prove, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-ack
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-confirm
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-init
         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-try
         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcHeaderGet(options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcHeaderGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query node consensus-state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcNodeStateGet(options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcNodeStateGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Receive packet
         * @param {ReceivedPacketReq} receivePacketRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPacketsReceivePost(receivePacketRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query IBC path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPathGet(options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPathGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel close-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel close-init
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseInitReq} channelCloseInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query channel
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query next sequence receive
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel open-ack
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenAckReq} channelOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel open-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Transfer token
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {TransferTokenReq} transferTokenRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options) {
            const localVarAxiosArgs = IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * IBCApi - factory interface
 * @export
 */
export const IBCApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Channel open-init
         * @param {ChannelOpenInitReq} channelOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenInitPost(channelOpenInitRequestBody, options) {
            return IBCApiFp(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel open-try
         * @param {ChannelOpenTryReq} channelOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenTryPost(channelOpenTryRequestBody, options) {
            return IBCApiFp(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query client state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdClientStateGet(clientId, prove, options) {
            return IBCApiFp(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Query connections of a client
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConnectionsGet(clientId, prove, options) {
            return IBCApiFp(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Query cliet consensus-state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConsensusStateGet(clientId, prove, options) {
            return IBCApiFp(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit misbehaviour
         * @param {string} clientId Client ID
         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options) {
            return IBCApiFp(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query client root
         * @param {string} clientId Client ID
         * @param {number} height Root height
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdRootsHeightGet(clientId, height, prove, options) {
            return IBCApiFp(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Update client
         * @param {string} clientId Client ID
         * @param {UpdateClientReq} updateClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options) {
            return IBCApiFp(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Create client
         * @param {CreateClientReq} createClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsPost(createClientRequestBody, options) {
            return IBCApiFp(configuration).ibcClientsPost(createClientRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query connection
         * @param {string} connectionId Connection ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdGet(connectionId, prove, options) {
            return IBCApiFp(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-ack
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options) {
            return IBCApiFp(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-confirm
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options) {
            return IBCApiFp(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-init
         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options) {
            return IBCApiFp(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-try
         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options) {
            return IBCApiFp(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcHeaderGet(options) {
            return IBCApiFp(configuration).ibcHeaderGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Query node consensus-state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcNodeStateGet(options) {
            return IBCApiFp(configuration).ibcNodeStateGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Receive packet
         * @param {ReceivedPacketReq} receivePacketRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPacketsReceivePost(receivePacketRequestBody, options) {
            return IBCApiFp(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query IBC path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPathGet(options) {
            return IBCApiFp(configuration).ibcPathGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Channel close-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options) {
            return IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel close-init
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseInitReq} channelCloseInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options) {
            return IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query channel
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options) {
            return IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Query next sequence receive
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options) {
            return IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel open-ack
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenAckReq} channelOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options) {
            return IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel open-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options) {
            return IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Transfer token
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {TransferTokenReq} transferTokenRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options) {
            return IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(axios, basePath);
        },
    };
};
/**
 * IBCApi - object-oriented interface
 * @export
 * @class IBCApi
 * @extends {BaseAPI}
 */
export class IBCApi extends BaseAPI {
    /**
     *
     * @summary Channel open-init
     * @param {ChannelOpenInitReq} channelOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcChannelsOpenInitPost(channelOpenInitRequestBody, options) {
        return IBCApiFp(this.configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Channel open-try
     * @param {ChannelOpenTryReq} channelOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcChannelsOpenTryPost(channelOpenTryRequestBody, options) {
        return IBCApiFp(this.configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query client state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdClientStateGet(clientId, prove, options) {
        return IBCApiFp(this.configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query connections of a client
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdConnectionsGet(clientId, prove, options) {
        return IBCApiFp(this.configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query cliet consensus-state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdConsensusStateGet(clientId, prove, options) {
        return IBCApiFp(this.configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Submit misbehaviour
     * @param {string} clientId Client ID
     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options) {
        return IBCApiFp(this.configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query client root
     * @param {string} clientId Client ID
     * @param {number} height Root height
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdRootsHeightGet(clientId, height, prove, options) {
        return IBCApiFp(this.configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update client
     * @param {string} clientId Client ID
     * @param {UpdateClientReq} updateClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options) {
        return IBCApiFp(this.configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Create client
     * @param {CreateClientReq} createClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsPost(createClientRequestBody, options) {
        return IBCApiFp(this.configuration).ibcClientsPost(createClientRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query connection
     * @param {string} connectionId Connection ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsConnectionIdGet(connectionId, prove, options) {
        return IBCApiFp(this.configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Connection open-ack
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options) {
        return IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Connection open-confirm
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options) {
        return IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Connection open-init
     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options) {
        return IBCApiFp(this.configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Connection open-try
     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options) {
        return IBCApiFp(this.configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcHeaderGet(options) {
        return IBCApiFp(this.configuration).ibcHeaderGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query node consensus-state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcNodeStateGet(options) {
        return IBCApiFp(this.configuration).ibcNodeStateGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Receive packet
     * @param {ReceivedPacketReq} receivePacketRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPacketsReceivePost(receivePacketRequestBody, options) {
        return IBCApiFp(this.configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query IBC path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPathGet(options) {
        return IBCApiFp(this.configuration).ibcPathGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Channel close-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options) {
        return IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Channel close-init
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseInitReq} channelCloseInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options) {
        return IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query channel
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options) {
        return IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query next sequence receive
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options) {
        return IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Channel open-ack
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenAckReq} channelOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options) {
        return IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Channel open-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options) {
        return IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Transfer token
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {TransferTokenReq} transferTokenRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options) {
        return IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(this.axios, this.basePath);
    }
}
/**
 * MintApi - axios parameter creator
 * @export
 */
export const MintApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet(options = {}) {
            const localVarPath = `/minting/annual-provisions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingInflationGet(options = {}) {
            const localVarPath = `/minting/inflation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingParametersGet(options = {}) {
            const localVarPath = `/minting/parameters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MintApi - functional programming interface
 * @export
 */
export const MintApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet(options) {
            const localVarAxiosArgs = MintApiAxiosParamCreator(configuration).mintingAnnualProvisionsGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingInflationGet(options) {
            const localVarAxiosArgs = MintApiAxiosParamCreator(configuration).mintingInflationGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingParametersGet(options) {
            const localVarAxiosArgs = MintApiAxiosParamCreator(configuration).mintingParametersGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MintApi - factory interface
 * @export
 */
export const MintApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet(options) {
            return MintApiFp(configuration).mintingAnnualProvisionsGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingInflationGet(options) {
            return MintApiFp(configuration).mintingInflationGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingParametersGet(options) {
            return MintApiFp(configuration).mintingParametersGet(options)(axios, basePath);
        },
    };
};
/**
 * MintApi - object-oriented interface
 * @export
 * @class MintApi
 * @extends {BaseAPI}
 */
export class MintApi extends BaseAPI {
    /**
     *
     * @summary Current minting annual provisions value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    mintingAnnualProvisionsGet(options) {
        return MintApiFp(this.configuration).mintingAnnualProvisionsGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Current minting inflation value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    mintingInflationGet(options) {
        return MintApiFp(this.configuration).mintingInflationGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Minting module parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    mintingParametersGet(options) {
        return MintApiFp(this.configuration).mintingParametersGet(options)(this.axios, this.basePath);
    }
}
/**
 * SlashingApi - axios parameter creator
 * @export
 */
export const SlashingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParametersGet(options = {}) {
            const localVarPath = `/slashing/parameters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingSigningInfosGet(page, limit, options = {}) {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError("page", "Required parameter page was null or undefined when calling slashingSigningInfosGet.");
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError("limit", "Required parameter limit was null or undefined when calling slashingSigningInfosGet.");
            }
            const localVarPath = `/slashing/signing_infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {UnjailReq} unjailBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.");
            }
            // verify required parameter 'unjailBody' is not null or undefined
            if (unjailBody === null || unjailBody === undefined) {
                throw new RequiredError("unjailBody", "Required parameter unjailBody was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.");
            }
            const localVarPath = `/slashing/validators/{validatorAddr}/unjail`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof unjailBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(unjailBody !== undefined ? unjailBody : {})
                : unjailBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SlashingApi - functional programming interface
 * @export
 */
export const SlashingApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParametersGet(options) {
            const localVarAxiosArgs = SlashingApiAxiosParamCreator(configuration).slashingParametersGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingSigningInfosGet(page, limit, options) {
            const localVarAxiosArgs = SlashingApiAxiosParamCreator(configuration).slashingSigningInfosGet(page, limit, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {UnjailReq} unjailBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options) {
            const localVarAxiosArgs = SlashingApiAxiosParamCreator(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SlashingApi - factory interface
 * @export
 */
export const SlashingApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParametersGet(options) {
            return SlashingApiFp(configuration).slashingParametersGet(options)(axios, basePath);
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingSigningInfosGet(page, limit, options) {
            return SlashingApiFp(configuration).slashingSigningInfosGet(page, limit, options)(axios, basePath);
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {UnjailReq} unjailBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options) {
            return SlashingApiFp(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(axios, basePath);
        },
    };
};
/**
 * SlashingApi - object-oriented interface
 * @export
 * @class SlashingApi
 * @extends {BaseAPI}
 */
export class SlashingApi extends BaseAPI {
    /**
     *
     * @summary Get the current slashing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    slashingParametersGet(options) {
        return SlashingApiFp(this.configuration).slashingParametersGet(options)(this.axios, this.basePath);
    }
    /**
     * Get sign info of all validators
     * @summary Get sign info of given all validators
     * @param {number} page Page number
     * @param {number} limit Maximum number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    slashingSigningInfosGet(page, limit, options) {
        return SlashingApiFp(this.configuration).slashingSigningInfosGet(page, limit, options)(this.axios, this.basePath);
    }
    /**
     * Send transaction to unjail a jailed validator
     * @summary Unjail a jailed validator
     * @param {string} validatorAddr Bech32 validator address
     * @param {UnjailReq} unjailBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options) {
        return SlashingApiFp(this.configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(this.axios, this.basePath);
    }
}
/**
 * StakingApi - axios parameter creator
 * @export
 */
export const StakingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsGet.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/delegations`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {DelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsPost.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/delegations`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof delegation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(delegation !== undefined ? delegation : {})
                : delegation || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}`
                .replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)))
                .replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {RedelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrRedelegationsPost.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/redelegations`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof delegation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(delegation !== undefined ? delegation : {})
                : delegation || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsGet.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/unbonding_delegations`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {UndelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsPost.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/unbonding_delegations`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof delegation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(delegation !== undefined ? delegation : {})
                : delegation || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}`
                .replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)))
                .replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsGet.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/validators`.replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options = {}) {
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.");
            }
            const localVarPath = `/staking/delegators/{delegatorAddr}/validators/{validatorAddr}`
                .replace(`{${"delegatorAddr"}}`, encodeURIComponent(String(delegatorAddr)))
                .replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParametersGet(options = {}) {
            const localVarPath = `/staking/parameters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingPoolGet(options = {}) {
            const localVarPath = `/staking/pool`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options = {}) {
            const localVarPath = `/staking/redelegations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (delegator !== undefined) {
                localVarQueryParameter["delegator"] = delegator;
            }
            if (validatorFrom !== undefined) {
                localVarQueryParameter["validator_from"] = validatorFrom;
            }
            if (validatorTo !== undefined) {
                localVarQueryParameter["validator_to"] = validatorTo;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsGet(status, page, limit, options = {}) {
            const localVarPath = `/staking/validators`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (status !== undefined) {
                localVarQueryParameter["status"] = status;
            }
            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrDelegationsGet.");
            }
            const localVarPath = `/staking/validators/{validatorAddr}/delegations`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet(validatorAddr, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrGet.");
            }
            const localVarPath = `/staking/validators/{validatorAddr}`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options = {}) {
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrUnbondingDelegationsGet.");
            }
            const localVarPath = `/staking/validators/{validatorAddr}/unbonding_delegations`.replace(`{${"validatorAddr"}}`, encodeURIComponent(String(validatorAddr)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StakingApi - functional programming interface
 * @export
 */
export const StakingApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {DelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {RedelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {UndelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParametersGet(options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingParametersGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingPoolGet(options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingPoolGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsGet(status, page, limit, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingValidatorsGet(status, page, limit, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet(validatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options) {
            const localVarAxiosArgs = StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * StakingApi - factory interface
 * @export
 */
export const StakingApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {DelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {RedelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {UndelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
            return StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParametersGet(options) {
            return StakingApiFp(configuration).stakingParametersGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingPoolGet(options) {
            return StakingApiFp(configuration).stakingPoolGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options) {
            return StakingApiFp(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsGet(status, page, limit, options) {
            return StakingApiFp(configuration).stakingValidatorsGet(status, page, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options) {
            return StakingApiFp(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet(validatorAddr, options) {
            return StakingApiFp(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options) {
            return StakingApiFp(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(axios, basePath);
        },
    };
};
/**
 * StakingApi - object-oriented interface
 * @export
 * @class StakingApi
 * @extends {BaseAPI}
 */
export class StakingApi extends BaseAPI {
    /**
     *
     * @summary Get all delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Submit delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {DelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query the current delegation between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Submit a redelegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {RedelegationReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get all unbonding delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Submit an unbonding delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {UndelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query all unbonding delegations between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query all validators that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query a validator that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 ValAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options) {
        return StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get the current staking parameter values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingParametersGet(options) {
        return StakingApiFp(this.configuration).stakingParametersGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get the current state of the staking pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingPoolGet(options) {
        return StakingApiFp(this.configuration).stakingPoolGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get all redelegations (filter by query params)
     * @param {string} [delegator] Bech32 AccAddress of Delegator
     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options) {
        return StakingApiFp(this.configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get all validator candidates. By default it returns only the bonded validators.
     * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
     * @param {number} [page] The page number.
     * @param {number} [limit] The maximum number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsGet(status, page, limit, options) {
        return StakingApiFp(this.configuration).stakingValidatorsGet(status, page, limit, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get all delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options) {
        return StakingApiFp(this.configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Query the information from a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsValidatorAddrGet(validatorAddr, options) {
        return StakingApiFp(this.configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get all unbonding delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options) {
        return StakingApiFp(this.configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(this.axios, this.basePath);
    }
}
/**
 * SupplyApi - axios parameter creator
 * @export
 */
export const SupplyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalDenominationGet(denomination, options = {}) {
            // verify required parameter 'denomination' is not null or undefined
            if (denomination === null || denomination === undefined) {
                throw new RequiredError("denomination", "Required parameter denomination was null or undefined when calling supplyTotalDenominationGet.");
            }
            const localVarPath = `/supply/total/{denomination}`.replace(`{${"denomination"}}`, encodeURIComponent(String(denomination)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalGet(options = {}) {
            const localVarPath = `/supply/total`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SupplyApi - functional programming interface
 * @export
 */
export const SupplyApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalDenominationGet(denomination, options) {
            const localVarAxiosArgs = SupplyApiAxiosParamCreator(configuration).supplyTotalDenominationGet(denomination, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalGet(options) {
            const localVarAxiosArgs = SupplyApiAxiosParamCreator(configuration).supplyTotalGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SupplyApi - factory interface
 * @export
 */
export const SupplyApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalDenominationGet(denomination, options) {
            return SupplyApiFp(configuration).supplyTotalDenominationGet(denomination, options)(axios, basePath);
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalGet(options) {
            return SupplyApiFp(configuration).supplyTotalGet(options)(axios, basePath);
        },
    };
};
/**
 * SupplyApi - object-oriented interface
 * @export
 * @class SupplyApi
 * @extends {BaseAPI}
 */
export class SupplyApi extends BaseAPI {
    /**
     *
     * @summary Total supply of a single coin denomination
     * @param {string} denomination Coin denomination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplyApi
     */
    supplyTotalDenominationGet(denomination, options) {
        return SupplyApiFp(this.configuration).supplyTotalDenominationGet(denomination, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Total supply of coins in the chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplyApi
     */
    supplyTotalGet(options) {
        return SupplyApiFp(this.configuration).supplyTotalGet(options)(this.axios, this.basePath);
    }
}
/**
 * TendermintRPCApi - axios parameter creator
 * @export
 */
export const TendermintRPCApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet(height, options = {}) {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError("height", "Required parameter height was null or undefined when calling blocksHeightGet.");
            }
            const localVarPath = `/blocks/{height}`.replace(`{${"height"}}`, encodeURIComponent(String(height)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet(options = {}) {
            const localVarPath = `/blocks/latest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet(options = {}) {
            const localVarPath = `/syncing`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet(height, options = {}) {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError("height", "Required parameter height was null or undefined when calling validatorsetsHeightGet.");
            }
            const localVarPath = `/validatorsets/{height}`.replace(`{${"height"}}`, encodeURIComponent(String(height)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet(options = {}) {
            const localVarPath = `/validatorsets/latest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TendermintRPCApi - functional programming interface
 * @export
 */
export const TendermintRPCApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet(height, options) {
            const localVarAxiosArgs = TendermintRPCApiAxiosParamCreator(configuration).blocksHeightGet(height, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet(options) {
            const localVarAxiosArgs = TendermintRPCApiAxiosParamCreator(configuration).blocksLatestGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet(options) {
            const localVarAxiosArgs = TendermintRPCApiAxiosParamCreator(configuration).syncingGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet(height, options) {
            const localVarAxiosArgs = TendermintRPCApiAxiosParamCreator(configuration).validatorsetsHeightGet(height, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet(options) {
            const localVarAxiosArgs = TendermintRPCApiAxiosParamCreator(configuration).validatorsetsLatestGet(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TendermintRPCApi - factory interface
 * @export
 */
export const TendermintRPCApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet(height, options) {
            return TendermintRPCApiFp(configuration).blocksHeightGet(height, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet(options) {
            return TendermintRPCApiFp(configuration).blocksLatestGet(options)(axios, basePath);
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet(options) {
            return TendermintRPCApiFp(configuration).syncingGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet(height, options) {
            return TendermintRPCApiFp(configuration).validatorsetsHeightGet(height, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet(options) {
            return TendermintRPCApiFp(configuration).validatorsetsLatestGet(options)(axios, basePath);
        },
    };
};
/**
 * TendermintRPCApi - object-oriented interface
 * @export
 * @class TendermintRPCApi
 * @extends {BaseAPI}
 */
export class TendermintRPCApi extends BaseAPI {
    /**
     *
     * @summary Get a block at a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    blocksHeightGet(height, options) {
        return TendermintRPCApiFp(this.configuration).blocksHeightGet(height, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    blocksLatestGet(options) {
        return TendermintRPCApiFp(this.configuration).blocksLatestGet(options)(this.axios, this.basePath);
    }
    /**
     * Get if the node is currently syning with other nodes
     * @summary Syncing state of node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    syncingGet(options) {
        return TendermintRPCApiFp(this.configuration).syncingGet(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get a validator set a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    validatorsetsHeightGet(height, options) {
        return TendermintRPCApiFp(this.configuration).validatorsetsHeightGet(height, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get the latest validator set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    validatorsetsLatestGet(options) {
        return TendermintRPCApiFp(this.configuration).validatorsetsLatestGet(options)(this.axios, this.basePath);
    }
}
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {DecodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsDecodePost(tx, options = {}) {
            // verify required parameter 'tx' is not null or undefined
            if (tx === null || tx === undefined) {
                throw new RequiredError("tx", "Required parameter tx was null or undefined when calling txsDecodePost.");
            }
            const localVarPath = `/txs/decode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof tx !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tx !== undefined ? tx : {})
                : tx || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {EncodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsEncodePost(tx, options = {}) {
            // verify required parameter 'tx' is not null or undefined
            if (tx === null || tx === undefined) {
                throw new RequiredError("tx", "Required parameter tx was null or undefined when calling txsEncodePost.");
            }
            const localVarPath = `/txs/encode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof tx !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tx !== undefined ? tx : {})
                : tx || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options = {}) {
            const localVarPath = `/txs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (messageAction !== undefined) {
                localVarQueryParameter["message.action"] = messageAction;
            }
            if (messageSender !== undefined) {
                localVarQueryParameter["message.sender"] = messageSender;
            }
            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (txMinheight !== undefined) {
                localVarQueryParameter["tx.minheight"] = txMinheight;
            }
            if (txMaxheight !== undefined) {
                localVarQueryParameter["tx.maxheight"] = txMaxheight;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsHashGet(hash, options = {}) {
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new RequiredError("hash", "Required parameter hash was null or undefined when calling txsHashGet.");
            }
            const localVarPath = `/txs/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {BroadcastReq} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost(txBroadcast, options = {}) {
            // verify required parameter 'txBroadcast' is not null or undefined
            if (txBroadcast === null || txBroadcast === undefined) {
                throw new RequiredError("txBroadcast", "Required parameter txBroadcast was null or undefined when calling txsPost.");
            }
            const localVarPath = `/txs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof txBroadcast !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(txBroadcast !== undefined ? txBroadcast : {})
                : txBroadcast || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function (configuration) {
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {DecodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsDecodePost(tx, options) {
            const localVarAxiosArgs = TransactionsApiAxiosParamCreator(configuration).txsDecodePost(tx, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {EncodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsEncodePost(tx, options) {
            const localVarAxiosArgs = TransactionsApiAxiosParamCreator(configuration).txsEncodePost(tx, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            const localVarAxiosArgs = TransactionsApiAxiosParamCreator(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsHashGet(hash, options) {
            const localVarAxiosArgs = TransactionsApiAxiosParamCreator(configuration).txsHashGet(hash, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {BroadcastReq} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost(txBroadcast, options) {
            const localVarAxiosArgs = TransactionsApiAxiosParamCreator(configuration).txsPost(txBroadcast, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {DecodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsDecodePost(tx, options) {
            return TransactionsApiFp(configuration).txsDecodePost(tx, options)(axios, basePath);
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {EncodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsEncodePost(tx, options) {
            return TransactionsApiFp(configuration).txsEncodePost(tx, options)(axios, basePath);
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            return TransactionsApiFp(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(axios, basePath);
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsHashGet(hash, options) {
            return TransactionsApiFp(configuration).txsHashGet(hash, options)(axios, basePath);
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {BroadcastReq} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost(txBroadcast, options) {
            return TransactionsApiFp(configuration).txsPost(txBroadcast, options)(axios, basePath);
        },
    };
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
     * @summary Decode a transaction from the Amino wire format
     * @param {DecodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsDecodePost(tx, options) {
        return TransactionsApiFp(this.configuration).txsDecodePost(tx, options)(this.axios, this.basePath);
    }
    /**
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @summary Encode a transaction to the Amino wire format
     * @param {EncodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsEncodePost(tx, options) {
        return TransactionsApiFp(this.configuration).txsEncodePost(tx, options)(this.axios, this.basePath);
    }
    /**
     * Search transactions by events.
     * @summary Search transactions
     * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
     * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
     * @param {number} [page] Page number
     * @param {number} [limit] Maximum number of items per page
     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
        return TransactionsApiFp(this.configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(this.axios, this.basePath);
    }
    /**
     * Retrieve a transaction using its hash.
     * @summary Get a Tx by hash
     * @param {string} hash Tx hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsHashGet(hash, options) {
        return TransactionsApiFp(this.configuration).txsHashGet(hash, options)(this.axios, this.basePath);
    }
    /**
     * Broadcast a signed tx to a full node
     * @summary Broadcast a signed tx
     * @param {BroadcastReq} txBroadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsPost(txBroadcast, options) {
        return TransactionsApiFp(this.configuration).txsPost(txBroadcast, options)(this.axios, this.basePath);
    }
}
